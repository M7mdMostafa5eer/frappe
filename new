# 01 | use the official Ubuntu as the base image |
# ------------------------------------------------
	ARG PYTHON_VERSION=3.11.4
    ARG DEBIAN_BASE=bookworm
    FROM python:${PYTHON_VERSION}-slim-${DEBIAN_BASE} AS base

# 02 | create variables |
# -----------------------
	ARG	USER_NAME=frappe

	ARG	NODE_VERSION=18.16.1
	ENV	NVM_DIR=/home/${USER_NAME}/.nvm
	ENV	PATH ${NVM_DIR}/versions/node/v${NODE_VER}/bin/:${PATH}
	ARG	ARCH="" 
    RUN if [ "$(uname -m)" = "aarch64" ]; then export ARCH=arm64; fi && if [ "$(uname -m)" = "x86_64" ]; then export ARCH=amd64; fi
	
	ARG WKHTMLTOPDF_VERSION=0.12.6.1-3 && WKHTMLTOPDF_DISTRO=bookworm && Downloaded_File=wkhtmltox_${WKHTMLTOPDF_VERSION}.${WKHTMLTOPDF_DISTRO}_${ARCH}.deb
	
	ARG	FRAPPE_VERSION=version-14 && FRAPPE_FOLDER=frappe-bench && FRAPPE_PATH=https://github.com/frappe/frappe

# 04 | create new user |
# ----------------------
    RUN useradd -ms /bin/bash ${USER_NAME}

# 05 | update & install mandatory tools |
# ---------------------------------------
    RUN apt-get update && apt-get install --no-install-recommends -y				\
            curl																	\
            git																		\
            vim																		\
            nginx																	\
            gettext-base													\
        # weasyprint_dependencies
            libpango-1.0-0												\
            libharfbuzz0b													\
            libpangoft2-1.0-0											\
            libpangocairo-1.0-0										\
        # for_backups
            restic																\
        # mariadb
            mariadb-client												\
        # Postgres
            postgresql-client											\
        # for_healthcheck
            wait-for-it														\
            jq																		\
        # nodejs
        &&  mkdir -p ${NVM_DIR}																																&&\
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash		&&\
            . ${NVM_DIR}/nvm.sh																																&&\
            nvm install ${NODE_VERSION}																												&&\
            nvm use v${NODE_VERSION}																													&&\
            npm install -g yarn																																&&\
            nvm alias default v${NODE_VERSION}																								&&\
            rm -rf ${NVM_DIR}/.cache																													&&\
            echo 'export NVM_DIR="/home/$USER_NAME/.nvm"' >>/home/${USER_NAME}/.bashrc				&&\
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm' >>/home/${USER_NAME}/.bashrc			&&\
            echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion' >>/home/${USER_NAME}/.bashrc	&&\
        # Install wkhtmltopdf with patched qt
            curl -sLO https://github.com/wkhtmltopdf/packaging/releases/download/$WKHTMLTOPDF_VERSION/$Downloaded_File	&&\
            apt-get install -y ./$Downloaded_File																																				&&\
        # Fixes for non-root nginx and logs to stdout
            sed -i '/user www-data/d' /etc/nginx/nginx.conf																															&&\
            ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log									&&\
            touch /run/nginx.pid																																												&&\
            chown -R ${USER_NAME}:${USER_NAME} /etc/nginx/conf.d														&&\
            chown -R ${USER_NAME}:${USER_NAME} /etc/nginx/nginx.conf													&&\
            chown -R ${USER_NAME}:${USER_NAME} /var/log/nginx															&&\
            chown -R ${USER_NAME}:${USER_NAME} /var/lib/nginx															&&\
            chown -R ${USER_NAME}:${USER_NAME} /run/nginx.pid															&&\
        # Clean up
            rm -rf /var/lib/apt/lists/*																					&&\
            rm -fr /etc/nginx/sites-enabled/default																		&&\
            rm $Downloaded_File

    COPY resources/nginx-template.conf /templates/nginx/frappe.conf.template
    COPY resources/nginx-entrypoint.sh /usr/local/bin/nginx-entrypoint.sh

    RUN pip3 install frappe-bench

    FROM base AS builder

    RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y	\
        # For frappe framework
             wget																					\
        # For psycopg2
            libpq-dev																				\
        # Other
            libffi-dev																				\
            liblcms2-dev																			\
            libldap2-dev																			\
            libmariadb-dev																			\
            libsasl2-dev																			\
            libtiff5-dev																			\
            libwebp-dev																				\
            redis-tools																				\
            rlwrap																					\
            tk8.6-dev																				\
            cron																					\
        # For pandas
            gcc																						\
            build-essential																			\
            libbz2-dev																				\
        # Clean up
            rm -rf /var/lib/apt/lists/*

    USER ${USER_NAME}

    RUN bench init																					\
            --frappe-branch=${FRAPPE_VERSION}														\
            --frappe-path=${FRAPPE_PATH}															\
            --no-procfile																			\
            --no-backups																			\
            --skip-redis-config-generation															\
            --verbose																				\
        /home/${USER_NAME}/${FRAPPE_FOLDER} && cd /home/${USER_NAME}/${FRAPPE_FOLDER}				&&\
        echo "{}" > sites/common_site_config.json													&&\
        find apps -mindepth 1 -path "*/.git" | xargs rm -fr

    FROM base as final

    USER ${USER_NAME}

    COPY --from=builder --chown=${USER_NAME}:${USER_NAME} /home/${USER_NAME}/${FRAPPE_FOLDER} /home/${USER_NAME}/${FRAPPE_FOLDER}

    WORKDIR /home/${USER_NAME}/${FRAPPE_FOLDER}

    VOLUME [ \
        "/home/$USER_NAME/$FRAPPE_FOLDER/sites", 			\
        "/home/$USER_NAME/$FRAPPE_FOLDER/sites/assets", 	\
        "/home/$USER_NAME/$FRAPPE_FOLDER/logs" 				\
                                                            	 ]

    CMD [ \
        "/home/$USER_NAME/$FRAPPE_FOLDER/env/bin/gunicorn",	\
        "--chdir=/home/$USER_NAME/$FRAPPE_FOLDER/sites",	\
        "--bind=0.0.0.0:8000",								\
        "--threads=4",										\
        "--workers=2",										\
        "--worker-class=gthread",							\
        "--worker-tmp-dir=/dev/shm",						\
        "--timeout=120",									\
        "--preload",										\
        "frappe.app:application"							\
                                                            	]
